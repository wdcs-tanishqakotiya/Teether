from time import sleepfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.support.wait import WebDriverWaitclass AbstractComponent:    def __init__(self, driver):        self.driver = driver        self.wait = WebDriverWait(self.driver, 10)    def wait_for_visibility_of_ele(self, ele):        self.wait.until(EC.visibility_of(ele))    def wait_for_clickable_ele(self, ele):        self.wait.until(EC.element_to_be_clickable(ele))    def wait_for_visibility_of_eles(self, locator):        self.wait.until(EC.visibility_of_all_elements_located(locator))    def wait_for_window_handle(self, number_of_windows):        self.wait.until(EC.number_of_windows_to_be(number_of_windows))    def click_button(self, *args, button_txt: str = None):        if button_txt is not None:            buttons = self.driver.find_elements(By.TAG_NAME, 'button')            for button in buttons:                if button.text == button_txt:                    button.click()                    break        else:            button = self.driver.find_element(*args)            self.wait_for_visibility_of_ele(button)            if button.is_displayed():                button.click()                sleep(1)    def get_text_from_div(self, ele_text):        divs = self.driver.find_elements(By.TAG_NAME, 'div')        for div in divs:            if div.text == ele_text:                return div.text    def send_keys_on_element(self, *args, send_key):        ele = self.driver.find_element(*args)        self.wait_for_visibility_of_ele(ele)        if ele.is_displayed():            ele.send_keys(send_key)    def change_window_handle(self):        self.wait_for_window_handle(2)        for i, handle in enumerate(self.driver.window_handles):            if i == 0:                self.driver.close()            else:                self.driver.switch_to.window(handle)    def navigate_back(self):        back = self.driver.find_element(By.XPATH, "(//button[1])[2]")        self.wait_for_visibility_of_ele(back)        if back.is_displayed():            back.click()            sleep(1)    def clear_field_input(self, *args):        ele = self.driver.find_element(*args)        ele.clear()        sleep(1)        ele.click()